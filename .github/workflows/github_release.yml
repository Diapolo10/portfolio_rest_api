# This workflow automatically creates a GitHub release for the project on successful version update

name: Create a GitHub Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Binaries for ${{ matrix.os }}-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [
          '3.10',
          'pypy-3.9',
        ]
        exclude:
          - os: windows-latest
            python-version: 'pypy-3.9'
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Version
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: Install Library and Dependencies
        run: |
          poetry run pip install --upgrade pip setuptools
          poetry install

      - name: Build Python Releases
        run: |
          poetry build

      - name: Build Executables (Posix)
        if: ${{ !startsWith(matrix.python-version, 'pypy') && !startsWith(matrix.os, 'windows') }}
        run: |
          poetry run pip install nuitka
          poetry run python -m nuitka \
           --standalone \
           --onefile \
           --show-scons \
           --assume-yes-for-downloads \
           --output-dir=build \
           --enable-plugin=tk-inter \
           --disable-console \
           --include-data-dir=src/tccgs/data=data \
           src/tccgs/script.py

      - name: Build Executables (Windows)
        if: ${{ !startsWith(matrix.python-version, 'pypy') && startsWith(matrix.os, 'windows') }}
        run: |
          poetry run pip install nuitka
          poetry run python -m nuitka `
           --standalone `
           --onefile `
           --show-scons `
           --assume-yes-for-downloads `
           --output-dir=build `
           --enable-plugin=tk-inter `
           --disable-console `
           --include-data-dir=src/tccgs/data=data `
           --windows-company-name="Team DeltaV" `
           --windows-file-description="A joke program based on a popular credit card scam meme" `
           --windows-file-version="${{ steps.version.outputs.major_without_prefix }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}" `
           --windows-product-name="Totally Not Malware" `
           src/tccgs/script.py

      - name: Upload Builds
        uses: actions/upload-artifact@v3
        with:
          name: built-binary
          path: |
            dist/*.whl
            dist/*.tar.gz
            build/*.exe
            build/*.bin

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-binary

      - name: Check Version
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Check for Pre-Release
        uses: haya14busa/action-cond@v1
        id: is_prerelease
        with:
          cond: ${{ steps.version.outputs.prerelease != '' }}
          if_true: true
          if_false: false

      - name: Get Newest Changelog
        run: |
          python -c "import re; from pathlib import Path; text=re.sub('<!--(.*?)-->', '', (Path.cwd() / 'CHANGELOG.md').read_text(), flags=re.DOTALL); start=text.find('_' * 79); (Path.cwd() / 'TEMP_CHANGELOG.md').write_text(text[start:text.find('_' * 79, start+1)])"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.is_prerelease.outputs.value }}
          body_path: ./TEMP_CHANGELOG.md
          files: |
            dist/*.whl
            dist/*.tar.gz
            build/*.exe
            build/*.bin
